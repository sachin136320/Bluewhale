// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using aptmgt.webui.Data;

namespace aptmgt.webui.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20200321113120_assetrequestcostupdate")]
    partial class assetrequestcostupdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AppData")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("aptmgt.entity.assets.AssetDetails", b =>
                {
                    b.Property<string>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ActualCost")
                        .HasColumnType("text");

                    b.Property<string>("AssetRequestId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("AssetId");

                    b.HasIndex("AssetRequestId");

                    b.HasIndex("CommunityId");

                    b.ToTable("AssetDetails");
                });

            modelBuilder.Entity("aptmgt.entity.assets.AssetRequest", b =>
                {
                    b.Property<string>("AssetRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ActualCost")
                        .HasColumnType("text");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("ApproveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<string>("EstimatedCost")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProcureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProcurementStatus")
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("RequestDate")
                        .HasColumnType("text");

                    b.Property<string>("RequestStatus")
                        .HasColumnType("text");

                    b.HasKey("AssetRequestId");

                    b.HasIndex("CommunityId");

                    b.ToTable("AssetRequest");
                });

            modelBuilder.Entity("aptmgt.entity.assets.ServiceDetails", b =>
                {
                    b.Property<string>("ServiceDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AssetId")
                        .HasColumnType("text");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastServiceDoneDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastServiceNotes")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextServiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("RequireServiceFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceFrequencyinDays")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ServiceDetailID");

                    b.HasIndex("AssetId");

                    b.HasIndex("CommunityId");

                    b.ToTable("ServiceDetails");
                });

            modelBuilder.Entity("aptmgt.entity.assets.ServiceHistory", b =>
                {
                    b.Property<string>("ServiceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AssetId")
                        .HasColumnType("text");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ServiceDetailID")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNotes")
                        .HasColumnType("text");

                    b.HasKey("ServiceHistoryID");

                    b.HasIndex("AssetId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("ServiceDetailID");

                    b.ToTable("ServiceHistory");
                });

            modelBuilder.Entity("aptmgt.entity.builder.Builder", b =>
                {
                    b.Property<string>("BuilderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Pincode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("BuilderId");

                    b.ToTable("Builder");
                });

            modelBuilder.Entity("aptmgt.entity.community.CommunityBlock", b =>
                {
                    b.Property<string>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Blckname")
                        .HasColumnType("text");

                    b.Property<string>("CommunityID")
                        .HasColumnType("text");

                    b.Property<int>("NumberofFlats")
                        .HasColumnType("integer");

                    b.Property<int>("NumberofFloors")
                        .HasColumnType("integer");

                    b.HasKey("BlockID");

                    b.HasIndex("CommunityID");

                    b.ToTable("CommunityBlock");
                });

            modelBuilder.Entity("aptmgt.entity.community.CommunityDetails", b =>
                {
                    b.Property<string>("CommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BuilderID")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Pincode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("CommunityId");

                    b.HasIndex("BuilderID");

                    b.ToTable("CommunityDetails");
                });

            modelBuilder.Entity("aptmgt.entity.community.CommunityFlats", b =>
                {
                    b.Property<string>("FlatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("BlockID")
                        .HasColumnType("text");

                    b.Property<string>("FlatNumber")
                        .HasColumnType("text");

                    b.Property<string>("FloorNumber")
                        .HasColumnType("text");

                    b.HasKey("FlatID");

                    b.HasIndex("BlockID");

                    b.ToTable("CommunityFlats");
                });

            modelBuilder.Entity("aptmgt.entity.facility.FacilityBooking", b =>
                {
                    b.Property<string>("FacilityBookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Booking_ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("Booking_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Booking_description")
                        .HasColumnType("text");

                    b.Property<string>("Booking_duration")
                        .HasColumnType("text");

                    b.Property<DateTime>("Booking_end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Booking_facility")
                        .HasColumnType("text");

                    b.Property<DateTime>("Booking_start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Booking_status")
                        .HasColumnType("text");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Currdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Owner_flatno")
                        .HasColumnType("text");

                    b.Property<string>("Owner_name")
                        .HasColumnType("text");

                    b.HasKey("FacilityBookingID");

                    b.HasIndex("CommunityId");

                    b.ToTable("FacilityBooking");
                });

            modelBuilder.Entity("aptmgt.entity.facility.FacilityBookingHistory", b =>
                {
                    b.Property<string>("FacilityBookingHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Booking_ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("Booking_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Booking_description")
                        .HasColumnType("text");

                    b.Property<string>("Booking_duration")
                        .HasColumnType("text");

                    b.Property<DateTime>("Booking_end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Booking_facility")
                        .HasColumnType("text");

                    b.Property<DateTime>("Booking_start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Booking_status")
                        .HasColumnType("text");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Currdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Owner_flatno")
                        .HasColumnType("text");

                    b.Property<string>("Owner_name")
                        .HasColumnType("text");

                    b.HasKey("FacilityBookingHistoryID");

                    b.HasIndex("CommunityId");

                    b.ToTable("FacilityBookingHistory");
                });

            modelBuilder.Entity("aptmgt.entity.facility.FacilityMaster", b =>
                {
                    b.Property<string>("FacilityMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Bookable")
                        .HasColumnType("text");

                    b.Property<string>("CommunityID")
                        .HasColumnType("text");

                    b.Property<string>("FacilityName")
                        .HasColumnType("text");

                    b.HasKey("FacilityMasterID");

                    b.HasIndex("CommunityID");

                    b.ToTable("FacilityMaster");
                });

            modelBuilder.Entity("aptmgt.entity.user.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("aptmgt.entity.user.CommunityUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CommunityID")
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CommunityUser");
                });

            modelBuilder.Entity("aptmgt.entity.user.OwnerMaster", b =>
                {
                    b.Property<string>("ResidentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AgreementCopySubmitted")
                        .HasColumnType("boolean");

                    b.Property<string>("CommunityID")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FlatID")
                        .HasColumnType("text");

                    b.Property<string>("FlatNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("Occupied")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerType")
                        .HasColumnType("text");

                    b.Property<string>("QRText")
                        .HasColumnType("text");

                    b.HasKey("ResidentID");

                    b.HasIndex("CommunityID");

                    b.HasIndex("FlatID");

                    b.ToTable("OwnerMaster");
                });

            modelBuilder.Entity("aptmgt.entity.user.Role", b =>
                {
                    b.Property<string>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Rolename")
                        .HasColumnType("text");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("aptmgt.entity.user.VisitorDetails", b =>
                {
                    b.Property<string>("VisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CheckInDate")
                        .HasColumnType("text");

                    b.Property<string>("CheckOutDate")
                        .HasColumnType("text");

                    b.Property<string>("CommunityID")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfVisitor")
                        .HasColumnType("text");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea");

                    b.Property<string>("ResidentID")
                        .HasColumnType("text");

                    b.Property<string>("VisitorType")
                        .HasColumnType("text");

                    b.HasKey("VisitID");

                    b.HasIndex("CommunityID");

                    b.ToTable("VisitorDetails");
                });

            modelBuilder.Entity("aptmgt.entity.assets.AssetDetails", b =>
                {
                    b.HasOne("aptmgt.entity.assets.AssetRequest", "AssetRequest")
                        .WithMany()
                        .HasForeignKey("AssetRequestId");

                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("aptmgt.entity.assets.AssetRequest", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("aptmgt.entity.assets.ServiceDetails", b =>
                {
                    b.HasOne("aptmgt.entity.assets.AssetDetails", "AssetDetails")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("aptmgt.entity.assets.ServiceHistory", b =>
                {
                    b.HasOne("aptmgt.entity.assets.AssetDetails", "AssetDetails")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityId");

                    b.HasOne("aptmgt.entity.assets.ServiceDetails", "ServiceDetails")
                        .WithMany()
                        .HasForeignKey("ServiceDetailID");
                });

            modelBuilder.Entity("aptmgt.entity.community.CommunityBlock", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany("Blocks")
                        .HasForeignKey("CommunityID");
                });

            modelBuilder.Entity("aptmgt.entity.community.CommunityDetails", b =>
                {
                    b.HasOne("aptmgt.entity.builder.Builder", "Builder")
                        .WithMany("Communities")
                        .HasForeignKey("BuilderID");
                });

            modelBuilder.Entity("aptmgt.entity.community.CommunityFlats", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityBlock", "Block")
                        .WithMany("Flats")
                        .HasForeignKey("BlockID");
                });

            modelBuilder.Entity("aptmgt.entity.facility.FacilityBooking", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("aptmgt.entity.facility.FacilityBookingHistory", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("aptmgt.entity.facility.FacilityMaster", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany("Facility")
                        .HasForeignKey("CommunityID");
                });

            modelBuilder.Entity("aptmgt.entity.user.OwnerMaster", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityID");

                    b.HasOne("aptmgt.entity.community.CommunityFlats", "CommunityFlats")
                        .WithMany()
                        .HasForeignKey("FlatID");
                });

            modelBuilder.Entity("aptmgt.entity.user.VisitorDetails", b =>
                {
                    b.HasOne("aptmgt.entity.community.CommunityDetails", "ParentCommunity")
                        .WithMany()
                        .HasForeignKey("CommunityID");
                });
#pragma warning restore 612, 618
        }
    }
}
